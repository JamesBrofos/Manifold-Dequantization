import os
from typing import Tuple

import matplotlib.pyplot as plt

import jax.numpy as jnp
import jax.scipy.stats as jspst
from jax import lax, random
from jax import jit, value_and_grad

from prax.bijectors import affine


"""This code implements a basic example to show the process of estimating the
parameters of a bijection given observed data. We assume that an affine
transformation of a standard normal has generated observations and the
objective is to find the maximum likelihood estimates of the parameters of the
affine transformation that best explain these data.

"""

def log_likelihood(y: jnp.ndarray, shift: jnp.ndarray, scale: jnp.ndarray) -> float:
    """Compute the log-likelihood of observing `y` given the assumption that these
    variables are generated by transforming a standard normal distribution
    according to an affine transformation.

    """
    x = affine.inverse(y, shift, scale)
    base = jspst.multivariate_normal.logpdf(x, jnp.zeros((2, )), jnp.eye(2))
    corr = affine.forward_log_det_jacobian(scale)
    return jnp.sum(base - corr)

def gradient_ascent(y: jnp.ndarray) -> Tuple[jnp.ndarray]:
    """Perform gradient ascent to identify to maximum likelihood estimate of the
    affine transformation.

    """
    shift = jnp.zeros((2, ))
    scale = jnp.ones_like(shift)
    def step(it, params):
        shift, scale = params
        value, grad = value_and_grad(log_likelihood, (1, 2))(y, shift, scale)
        # Small step-sizes are evidently necessary to prevent oscillatory
        # behavior.
        shift += 0.001 * grad[0]
        scale += 0.0001 * grad[1]
        return shift, scale
    return lax.fori_loop(0, 10000, step, (shift, scale))


rng = random.PRNGKey(1)
mu = jnp.array([1., -1.])
C = jnp.array([1., 2.])
y = random.multivariate_normal(rng, mu, jnp.diag(C), [1000])
shift, scale = gradient_ascent(y)
print('affine transform shift:       {:.5f} - {:.5f}'.format(*shift))
print('maximum log-likelihood shift: {:.5f} - {:.5f}'.format(*y.mean(0)))
print('affine transform scale:       {:.5f} - {:.5f}'.format(*scale))
print('maximum log-likelihood scale: {:.5f} - {:.5f}'.format(*y.std(0)))
